buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.2.21'
    id 'maven'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '2.0.2'
    id 'org.jetbrains.dokka' version '0.9.15'
    id "com.jfrog.bintray" version "1.7.3"
}


group 'pw.jonak'
version '0.2-FINAL'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "org.jetbrains.kotlin:kotlin-reflect"
    testCompile "org.jetbrains.kotlin:kotlin-test"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit"
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

dokka {
    outputFormat = 'html'
    jdkVersion = 8
    // includeNonPublic = true // Not working...
    impliedPlatforms = ["JVM"]
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/dokkadoc"
    inputs.dir 'src/kotlin'
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

compileJava {
    options.encoding = "UTF-8"
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

bintray {
    user = getSecret('BINTRAY_USER')
    key = getSecret('BINTRAY_API_KEY')
    pkg {
        repo = 'code-practice-helper'
        name = 'code-practice-helper'
        licenses = ['GPL-3.0']
        vcsUrl = 'https://github.com/jdkula/code-practice-helper.git'
        configurations = ['archives']
        version {
            name = "v$project.version"
            desc = "v$project.version"
            released = new Date()
            vcsTag = "v$project.version"
        }
    }
}

static def getSecret(String key) {
    Properties props = new Properties()
    props.load(new FileInputStream(new File('secrets.properties')))
    return props[key]
}